<?php

/**
 * @file
 * Default # of items to show on email listing page.
 * @var integer
 */

define('MAILING_LIST_LIMIT', 50);

/**
 * Message for when a user subscribes.
 *
 * @var unknown_type
 */
define('MAILING_LIST_MESSAGE_SUBSCRIPTION', 'Subscription for %mail saved.');

/**
 * @file
 * Minimalistic mailing list module.
 */

require_once dirname(__FILE__) . '/mailing_list.log.inc';

/**
 * Implement hook_help().
 */
function mailing_list_help($path, $arg) {
  if ($path == 'admin/structure/mailing-list/%/import') {
    return t('The import facility allows you to upload a CSV file containing e-mail addresses, and optional names, to add to your mailing list. The CSV file should have the e-mails as its first column, and the names (where available) as its second column. It must not have any header row.');
  }
}

/**
 * Implements hook_permission().
 */
function mailing_list_permission() {
  return [
    'administer mailing lists' => [
      'title' => t('Administer mailing lists'),
      'description' => t('Add or remove subscriptions and create / remove mailing lists.'),
    ],
  ];
}

/**
 * Implement hook_menu().
 */
function mailing_list_menu() {
  $items = [];

  $items['admin/structure/mailing-list'] = [
    'title' => 'Mailing lists',
    'description' => 'Manage your mailing lists.',
    'page callback' => 'mailing_list_lists',
    'access arguments' => ['administer mailing lists'],
    'file' => 'mailing_list.admin.inc',
  ];
  $items['admin/structure/mailing-list/list'] = [
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ];
  $items['admin/structure/mailing-list/add'] = [
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mailing_list_form'],
    'access arguments' => ['administer mailing lists'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'mailing_list.admin.inc',
  ];
  $items['admin/structure/mailing-list/settings'] = [
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mailing_list_admin_settings'],
    'access arguments' => ['administer mailing lists'],
    'file' => 'mailing_list.admin.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  $items['admin/structure/mailing-list/%mailing_list'] = [
    'title' => 'List e-mails',
    'page callback' => 'mailing_list_emails_list',
    'page arguments' => [3],
    'access arguments' => ['administer mailing lists'],
    'file' => 'mailing_list.admin.inc',
  ];
  $items['admin/structure/mailing-list/%mailing_list/list'] = [
    'title' => 'List e-mails',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ];
  $items['admin/structure/mailing-list/%mailing_list/add'] = [
    'title' => 'Add e-mail',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mailing_list_subscription_form', 3],
    'access arguments' => ['administer mailing lists'],
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  ];
  $items['admin/structure/mailing-list/%mailing_list/import'] = [
    'title' => 'Import e-mails',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mailing_list_import_form', 3],
    'access arguments' => ['administer mailing lists'],
    'type' => MENU_LOCAL_TASK,
    'weight' => -2,
    'file' => 'mailing_list.admin.inc',
  ];
  $items['admin/structure/mailing-list/%mailing_list/export'] = [
    'title' => 'Export list',
    'page callback' => 'mailing_list_export',
    'page arguments' => [3],
    'access arguments' => ['administer mailing lists'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'mailing_list.admin.inc',
  ];
  $items['admin/structure/mailing-list/%mailing_list/edit'] = [
    'title' => 'Rename list',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mailing_list_form', 3],
    'access arguments' => ['administer mailing lists'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'mailing_list.admin.inc',
  ];
  $items['admin/structure/mailing-list/%mailing_list/delete'] = [
    'title' => 'Delete list',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mailing_list_delete_confirm', 3],
    'access arguments' => ['administer mailing lists'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'mailing_list.admin.inc',
  ];
  $items['admin/structure/mailing-list/%mailing_list/%mailing_list_email'] = [
    'title' => 'Edit e-mail',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mailing_list_subscription_form', 3, TRUE, 4],
    'access arguments' => ['administer mailing lists'],
  ];
  $items['admin/structure/mailing-list/%mailing_list/emails/delete'] = [
    'title' => 'Delete e-mail',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mailing_list_email_delete_confirm', 3],
    'access arguments' => ['administer mailing lists'],
    'file' => 'mailing_list.admin.inc',
  ];
  $items['ajax/mailing-list/subscribe'] = [
    'page callback' => 'mailing_list_ajax_subscribe',
    'type' => MENU_CALLBACK,
    'access arguments' => ['access content'],
  ];
  $items['mailing-list/unsubscribe'] = [
    'page callback' => 'mailing_list_ajax_unsubscribe',
    'type' => MENU_CALLBACK,
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Implement hook_block_configure();
 */
function mailing_list_block_configure($delta = '') {
  $form['mailing_list_show_name_' . $delta] = [
    '#type' => 'checkbox',
    '#title' => t('Show name field in subscription form'),
    '#default_value' => variable_get('mailing_list_show_name_' . $delta, 1),
    '#description' => t('Whether or not to show a text field in the subscription form that this block displays, letting a subscriber enter his or her name. If the name field is shown, it also becomes required.'),
  ];
  return $form;
}

/**
 * Implement hook_block_save();
 */
function mailing_list_block_save($delta = '', $edit = []) {
  variable_set('mailing_list_show_name_' . $delta, $edit['mailing_list_show_name_' . $delta]);
}

/**
 * Implement hook_block_info();
 */
function mailing_list_block_info() {
  $block = [];
  $lists = mailing_list_get();
  foreach ($lists as $mlid => $list) {
    $block[$mlid] = [
      'info' => t('Mailing list: @name', ['@name' => $list->name]),
    ];
  }
  return $block;
}

/**
 * Implement hook_block_view();
 */
function mailing_list_block_view($delta = '') {
  $list = mailing_list_load($delta);
  if (!$list) {
    return;
  }
  $block = [
    'subject' => check_plain($list->name),
    'content' => drupal_get_form('mailing_list_subscription_form_' . $delta),
  ];
  return $block;
}

/**
 * Implement hook_forms().
 *
 * All subscription forms are build using mailing_list_subscription_form().
 * hook_forms() is required to provide unique form id for each one.
 */
function mailing_list_forms() {
  $forms = [];
  $lists = mailing_list_get();
  foreach ($lists as $mlid => $list) {
    $forms['mailing_list_subscription_form_' . $mlid] = [
      'callback' => 'mailing_list_subscription_form',
      'callback arguments' => [$list],
    ];
  }
  return $forms;
}

/**
 * Implement hook_admin_paths().
 */
function mailing_list_admin_paths() {
  $paths = [
    'admin/structure/mailing-list/*/export' => FALSE,
  ];
  return $paths;
}

/**
 * Returns a list of all mailing lists keyed by the mlid.
 *
 * @param $mlid
 *   If provided, only get the list with the specified mlid.
 *
 * @return array
 */
function mailing_list_get($mlid = NULL) {
  $query = db_select('mailing_list', 'ml')->fields('ml');
  if ($mlid) {
    $query->condition('mlid', $mlid);
  }
  return $query->execute()->fetchAllAssoc('mlid');
}

/**
 * Return the mailing list object matching a mailing list ID.
 *
 * @param $mlid
 *   The mailing list's ID.
 *
 * @return
 *   The mailing list object, if exists, FALSE otherwise.
 */
function mailing_list_load($mlid) {
  return current(mailing_list_get($mlid));
}

/**
 *
 */
function mailing_list_save(&$list) {
  $update = [];
  if (is_array($list)) {
    $list = (object) $list;
  }
  if (!empty($list->mlid)) {
    $update = ['mlid'];
  }

  return drupal_write_record('mailing_list', $list, $update);
}

/**
 * Deletes a mailing list and all its e-mails.
 *
 * @todo D7 queries.
 * @param $mlid
 *   The ID of the mailing list.
 */
function mailing_list_delete($mlid) {
  $res1 = db_delete('mailing_list_emails')
    ->condition('mlid', $mlid)
    ->execute();

  $res2 = db_delete('mailing_list')
    ->condition('mlid', $mlid)
    ->execute();
  return (bool) $res1 & $res2;
}

/**
 * Return the mailing list e-mail object matching an e-mail ID.
 *
 * @param $eid
 *   The e-mail's ID.
 *
 * @return
 *   The mailing list e-mail object, if exists, FALSE otherwise.
 */
function mailing_list_email_load($eid) {
  return db_select('mailing_list_emails', 'mle')
    ->fields('mle')
    ->condition('eid', $eid)
    ->execute()
    ->fetch();
}

/**
 * Saves a mailing_list_email record to the database.
 *
 * @param StdClass $mailing_list_email
 *   An object with the following fields
 *   - eid (optional): Primary key to save to in case of an update.
 *   - mlid: The mailing list ID to save to.
 *   - mail: The email to save.
 *   - name (optional): Name to store with the email.
 *
 * @return unknown_type
 */
function mailing_list_email_save(&$mailing_list_email) {
  $update = [];
  if (is_object($mailing_list_email)) {
    $mailing_list_email = (array) $mailing_list_email;
  }
  if (!empty($mailing_list_email['eid'])) {
    $update = ['eid'];
  }

  return drupal_write_record('mailing_list_emails', $mailing_list_email, $update);
}

/**
 * Return the mailing list e-mail object matching an email and a mailing list.
 *
 * @param $mlid
 *   The ID of the mailing list to get records for.
 * @param $mail
 *   Email to look for.
 *
 * @return
 *   The mailing list e-mail object, if exists, FALSE otherwise.
 */
function mailing_list_email_get_by_email($mlid, $mail) {
  return db_select('mailing_list_emails', 'mle')
    ->fields('mle')
    ->condition('mlid', $mlid)
    ->condition('mail', $mail)
    ->execute()
    ->fetchAllAssoc('eid');
}

/**
 * Return the mailing list e-mail object(s) matching a mailing list id.
 *
 * @param int $mlid
 *   The ID of the mailing list to get records for.
 *
 * @return unknown_type
 */
function mailing_list_email_get_by_list($mlid) {
  return db_select('mailing_list_emails', 'mle')
    ->fields('mle')
    ->condition('mlid', $mlid)
    ->execute()
    ->fetchAllAssoc('eid');
}

/**
 * Deletes an e-mail.
 *
 * @todo D7 queries.
 * @param $eid
 *   The ID of the e-mail.
 */
function mailing_list_email_delete($eid) {
  return db_delete('mailing_list_emails')
    ->condition('eid', $eid)
    ->execute();
}

/**
 * Gets the name for a subscriber e-mail if available, otherwise gets the
 * e-mail address.
 *
 * @param $data
 *   Subscriber object.
 *
 * @return
 *   Subscriber name or subscriber e-mail.
 */
function mailing_list_email_get_name($data) {
  $data = (object) $data;
  return !empty($data->name) ? $data->name : $data->mail;
}

/**
 * Display a form letting a user subscribe to a mailing list.
 */
function mailing_list_subscription_form($form, &$form_state, $list, $is_callback = FALSE, $email = NULL) {
  $admin = FALSE;
  if (user_access('administer mailing lists')) {
    $admin = TRUE;
    $is_edit = !empty($email);
    if ($is_callback) {
      if ($is_edit) {
        $title = t("Editing @email on @list_name", ['@list_name' => $list->name, '@email' => $email->mail]);
      }
      else {
        $title = t("Adding email to @list_name", ['@list_name' => $list->name]);
      }
      drupal_set_title($title);
    }
  }
  else {
    // Ensure that no one else can edit an entry.
    $email = NULL;
  }

  $form = [];
  $form['mlid'] = [
    '#type' => 'hidden',
    '#default_value' => $list->mlid,
  ];
  $form['ml_name'] = [
    '#type' => 'hidden',
    '#value' => $list->name,
  ];
  if (variable_get('mailing_list_show_name_' . $list->mlid, 1)) {
    $form['name'] = [
      '#title' => t('Name'),
      '#type' => 'textfield',
      '#size' => 20,
      '#required' => TRUE,
    ];
  }
  else {
    $form['name'] = [
      '#type' => 'hidden',
      '#value' => '',
    ];
  }
  $form['mail'] = [
    '#title' => t('E-mail'),
    '#type' => 'textfield',
    '#size' => 20,
    '#required' => TRUE,
  ];
  $form['source'] = [
    '#type' => 'hidden',
    '#value' => 'admin',
  ];
  $form['submit'] = [
    '#value' => t('Subscribe'),
    '#type' => 'submit',
    '#submit' => ['mailing_list_subscription_form_submit'],
  ];

  if ($admin && $email) {
    $form['name']['#default_value'] = $email->name;
    $form['mail']['#default_value'] = $email->mail;
    $form['eid'] = [
      '#type' => 'value',
      '#default_value' => $email->eid,
    ];
    $form['source'] = [
      '#type' => 'hidden',
      '#value' => 'admin',
    ];
  }

  $form['#validate'] = ['mailing_list_subscription_form_validate'];
  return $form;
}

/**
 * Validation handler for the subscription form; checks name and e-mail
 * entered.
 */
function mailing_list_subscription_form_validate($form, &$form_state) {
  $is_edit = FALSE;
  if (user_access('administer mailing lists')) {
    $admin = TRUE;
    $is_edit = !empty($form_state['values']['eid']);
  }

  $message = user_validate_mail($form_state['values']['mail']);
  if ($message) {
    form_set_error('mail', $message);
    return;
  }

  // Only do this check if the eid is not provided or the user is not an admin (and hense cannot edit existing entries).
  if (!$is_edit) {
    if (mailing_list_email_get_by_email($form_state['values']['mlid'], $form_state['values']['mail'])) {
      form_set_error('mail', t('The e-mail %mail already exists in mailing list %name.', ['%mail' => $form_state['values']['mail'], '%name' => $form_state['values']['ml_name']]));
    }
  }
}

/**
 * Submit handler for the subscription form; saves a subscription.
 */
function mailing_list_subscription_form_submit($form, &$form_state) {
  $is_edit = FALSE;
  $admin = FALSE;
  if (user_access('administer mailing lists')) {
    $admin = TRUE;
    $is_edit = !empty($form_state['values']['eid']);
  }

  if ($form_state['values']['mlid'] == NULL) {
    drupal_set_message(t('Unable to save mailing list subscription: no mailing list specified.'), 'error');
    return;
  }

  $mle = new StdClass();
  $mle->mlid = $form_state['values']['mlid'];
  $mle->mail = $form_state['values']['mail'];
  $mle->name = $form_state['values']['name'];
  $mle->source = $form_state['values']['source'];

  if ($is_edit) {
    $mle->eid = $form_state['values']['eid'];
    $mle->updated = REQUEST_TIME;
  }
  else {
    $mle->created = REQUEST_TIME;
  }

  if ($result = mailing_list_email_save($mle)) {
    // 새로 추가한 경우 가장 큰 아이디를 사용.
    $eid = 0;
    if ($result = SAVED_NEW) {
      $eid = db_query('SELECT MAX(eid) FROM {mailing_list_emails}')->fetchField();
    } else {
      $eid = $mle->eid;
    }

    // 관리자
    if ($admin) {
      // 수정
      if ($is_edit) {
        $message = '<span class="mailing-list-subscription-message">'
          . t(variable_get('mailing_list_message_admin_email_edited', "%name <%mail> updated."), [
            '%name' => $form_state['values']['name'],
            '%mail' => $form_state['values']['mail']
          ]) . '</span>';
        drupal_set_message($message);
        mailing_list_log($eid, 'mailing_list_email', 'update', ['message' => strip_tags($message)]);
        return;
      }
      // 추가
      global $user;
      $message = '<span class="mailing-list-subscription-message">'
        . t(variable_get('mailing_list_message_admin_email_added', "Submission confirmed: %admin added %name <%mail> to list %list."), [
          '%name' => $form_state['values']['name'],
          '%mail' => $form_state['values']['mail'],
          '%admin' => $user->name,
          '%list' => $form_state['values']['ml_name']
        ]) . '</span>';
      drupal_set_message($message);
      mailing_list_log($eid, 'mailing_list_email', 'create', ['message' => strip_tags($message)]);
      return;
    }
    // 구독폼 추가
    $message = '<span class="mailing-list-subscription-message">'
      . t(variable_get('mailing_list_subscription_message', MAILING_LIST_MESSAGE_SUBSCRIPTION), [
        '%name' => $form_state['values']['name'],
        '%mail' => $form_state['values']['mail']
      ]) . '</span>';
    drupal_set_message($message);
    watchdog('mailing_list', 'Mailing list: %name added via subscription form.', [
      '%name' => $form_state['values']['mail']
    ]);
    mailing_list_log($eid, 'mailing_list_email', 'create', ['message' => strip_tags($message)]);
  }
  else {
    drupal_set_message(t('Failed to subscribe to mailing list %name.', ['%name' => $form_state['values']['ml_name']]), 'error');
  }
}

/**
 * Mailing_list_ajax_subscribe.
 *
 * payloads: {
 *   agreed: "Y"
 *   mailing_list: "13"
 *   email: "mozodev@users.noreply.github.com"
 *   type: "newsletter"
 * }
 *
 * @see web/sites/all/modules/custom/slowalk/modules/block/wz_block.module:44
 * @see web/sites/all/modules/custom/slowalk/modules/block/newsletter.js
 * stibee_api: "https://stibee.com/api/v1.0/lists/pKnaojOCM6S_J5kNWNPjiq0bAxz3/public/subscribers"
 * kyeol_api: "/ajax/mailing-list/subscribe"
 */
function mailing_list_ajax_subscribe() {
  $payloads = $_POST;
  $response = [
    'status' => 'failed',
    'message' => '',
  ];
  // 개인정보 수집 및 이용 확인
  if (empty($payloads['agreed']) || $payloads['agreed'] != 'Y') {
    $response['errors'][] = [
      'code' => 'AG01',
      'message' => '개인정보 수집 및 이용에 동의해야 뉴스레터를 보내드릴 수 있습니다.',
    ];
  }
  // 메일링 리스트 확인
  if (empty($payloads['mailing_list']) || !mailing_list_get($payloads['mailing_list'])) {
    $response['errors'][] = [
      'code' => 'ML01',
      'message' => '구독 신청할 메일링 리스트를 지정해야 합니다.',
    ];
  }
  // 이메일 검증 -- 유효하지 않은 이메일 형식
  if (empty($payloads['email']) || user_validate_mail($payloads['email'])) {
    $response['errors'][] = [
      'code' => 'EM01',
      'message' => '이메일 주소 형식이 유효하지 않습니다.',
    ];
  }
  if (empty($response['errors'])) {
    $ml = mailing_list_get($payloads['mailing_list']);
    $ml = reset($ml);
    // 구독 신청 처리
    $mle = new StdClass();
    $mle->mlid = $payloads['mailing_list'];
    $mle->mail = $payloads['email'];
    $mle->name = obfuscate_email_address($payloads['email']);
    $mle->source = 'subscription_form';
    $mle->created = REQUEST_TIME;
    try {
      if (mailing_list_email_save($mle)) {
        $eid = db_query('SELECT MAX(eid) FROM {mailing_list_emails}')->fetchField();
        $response['status'] = 'success';
        $response['message'] = '구독해주셔서 감사합니다. 웹진결 뉴스레터 (' . $ml->name . ')를 보내드리겠습니다.';
        mailing_list_log($eid, 'mailing_list_email', 'create', [
          'entity_id' => $eid,
          'entity_label' => obfuscate_email_address($payloads['email']),
        ]);
      }
    } catch (\Throwable $th) {
      $code = $th->getCode();
      // Duplicate entry
      if ($code == 23000) {
        $response['errors'][] = [
          'code' => 'HY23000',
          'message' => '방금 요청하신 이메일 주소로 이미 뉴스레터 (' . $ml->name . ')를 보내드리고 있습니다.',
        ];
      }
    }
  }
  drupal_json_output($response);
}

/**
 * Mailing_list_ajax_unsubscribe.
 *
 * email_fields = ['mlid', 'email', 'created'];
 * token = base64_encode()
 */
function mailing_list_ajax_unsubscribe() {
  $payloads = $_GET;
  if (!empty($payloads['token'])) {
    $data =  explode('|', unserialize(base64_decode($token)));
    if (!empty($data) && count($data) == 3) {
      $email = mailing_list_email_get_by_email($data[0], $data[1]);
      if (!empty($email->eid) && mailing_list_email_delete($email->eid)) {
        // 삭제 성공
        mailing_list_log($email->eid, 'mailing_list_email', 'delete', [
          'entity_label' => obfuscate_email_address($email->mail),
        ]);
        return '<h1>구독 취소 완료</h1><p>이메일을 삭제했습니다.</p>';
      }
      else {
        // 그런 이메일이 없음|부적절한 토큰.
        return '<h1>구독 취소</h1>' . '<p>요청하신 이메일 주소를 찾을 수 없습니다.</p>';
      }
    }
  }
  // 토근 없는 경우.
  else {
    return '<h1>구독 취소 안내</h1>' .
      '<p>뉴스레터 이메일 하단에 수신거부 링크를 클릭하시거나</p>' .
      '<p>웹진 결 담당자에게 이메일을 보내주시면 확인 후 처리하겠습니다.</p>' .
      '<p>문의: remember814@stop.or.kr</p>';
  }
}

?>
